# path for the updated mask
Input_Mask_File <- PCA_Output$MaskPath
var_exp <- (PCA_Output$PCA_model$sdev^2/sum(PCA_Output$PCA_model$sdev^2))*100
barplot(var_exp, names.arg = colnames(PCA_Output$PCA_model$x))
pca_output_image_file_path = paste0(Output_Dir,"/",NameRaster,"/",TypePCA,"/PCA/","OutputPCA_30_PCs")
print(pca_output_image_file_path)
pca_output_image <- rast(pca_output_image_file_path)
plot(pca_output_image, main = "Principal Components", nc = 5, maxnl = 30)  # maxnl allows all 30 layers to be shown
# Define the path for PCA plots
# Define the path for individual PCA component plots
pca_plots_file_path <- paste0(Output_Dir, "/", NameRaster, "/", TypePCA, "/PCA/PCA_Plots")
# Create the directory if it doesn't exist
if (!dir.exists(pca_plots_file_path)) {
dir.create(pca_plots_file_path, recursive = TRUE, showWarnings = FALSE)
}
# Initialize a list to store output plot file paths
output_plots <- list()
# Loop through each layer in the PCA output image
for (i in 1:nlyr(pca_output_image)) {
# Extract each PC layer as a separate raster
pc_layer <- pca_output_image[[i]]
# Define the output file path for the plot
output_file <- paste0(pca_plots_file_path, "/PCA_PC_", i, ".png")
# Save the plot as a PNG
png(filename = output_file, width = 800, height = 600)
plot(pc_layer,
main = paste0("Principal Component ", i),
col = terrain.colors(100))  # Customize colors if needed
dev.off()  # Close the PNG device
# Store the output file path
output_plots[[i]] <- output_file
}
# Optional: print confirmation
print("PCA plots saved to:")
print(pca_plots_file_path)
# Select components from the PCA/SPCA/MNF raster
# Sel_PC = path of the file where selected components are stored
Sel_PC <- select_PCA_components(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
PCA_Files = PCA_Output$PCA_Files,
TypePCA = PCA_Output$TypePCA,
File_Open = TRUE)
################################################################################
##                  Perform Spectral species mapping                          ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_5.html            ##
################################################################################
print("MAP SPECTRAL SPECIES")
Kmeans_info <- map_spectral_species(Input_Image_File = Input_Image_File,
Input_Mask_File = PCA_Output$MaskPath,
Output_Dir = Output_Dir,
SpectralSpace_Output = PCA_Output,
nbclusters = nbclusters,
nbCPU = nbCPU, MaxRAM = MaxRAM)
################################################################################
##                Perform alpha and beta diversity mapping                    ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_6.html            ##
################################################################################
print("MAP ALPHA DIVERSITY")
Index_Alpha   = c('Shannon','Simpson')
#Index_Alpha <- c('Shannon')
map_alpha_div(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
window_size = window_size,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
Index_Alpha = Index_Alpha,
nbclusters = nbclusters)
print("MAP BETA DIVERSITY")
map_beta_div(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
window_size = window_size,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
nbclusters = nbclusters)
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
file_name <- file_name_rectified
cell <- paste0(base_path,'/data/rectified/',file_name)
tile <- rast(file.path(cell))
# Plot the RGB image for a quick check
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Calculate the mean of a few values of the near infrared bands (used for NDWI and SAVI)
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Calculate green band averages (used for NDWI)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
# Calculate red band averages (used for SAVI)
red_average <- mean(tile[[c(56, 57, 58, 59, 60, 61, 62, 63, 64, 65)]])
# Plot histogram of the distribution of the values
hist(NIR_average, breaks = seq(terra::minmax(NIR_average)[1], terra::minmax(NIR_average)[2] + 0.05, by = 0.01),
main = "Histogram of NIR average", xlab = "NIR_average")
################################################################################
# Create NDWI Mask NDWI = (Red - NIR) / (Red + NIR)
################################################################################
# Calculate the NDWI
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
# Plot histogram of the value distribution
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
# Create the NDWI mask (binary values) with a threshold of 0.1
#ndwi_threshold <- ndwi_threshold
ndwi_mask <- ifel(NDWI>ndwi_threshold, 0, 1)
# Plot the NDWI mask
plot(ndwi_mask, main = "NDWI Mask")
# Set value 0 to NA to exclude the unwanted pixels
ndwi_mask <- ifel(ndwi_mask==0, NA, 1)
# If desired, save the NDWI mask to a file
ndwi_threshold_modified <- gsub("\\.", "", ndwi_threshold)
ndwi_filename <- paste0(base_path,"/mask/",file_name_rectified,"_ndwi_mask_",ndwi_threshold_modified)
writeRaster(ndwi_mask, filename = file.path(ndwi_filename),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
################################################################################
# Create NDVI Mask NDVI = (NIR - Red) / (NIR + Red)
################################################################################
# Calculate the NDVI
NDVI <- (NIR_average-red_average)/(NIR_average+red_average)
# Plot histogram of the value distribution
hist(NDVI, breaks = seq(terra::minmax(NDVI)[1], terra::minmax(NDVI)[2] + 0.05, by = 0.01),
main = "Histogram of NDVI", xlab = "NDVI")
# Create the NDVI mask (binary values) with a threshold of 0.1
#ndvi_threshold <- 0.3
ndvi_mask <- ifel(NDVI>ndvi_threshold, 1, 0)
# Plot the NDVI mask
plot(ndvi_mask, main = "NDVI Mask")
# Set value 0 to NA to exclude the unwanted pixels
ndvi_mask <- ifel(ndvi_mask==0, NA, 1)
# If desired, save the NDVI mask to a file
ndvi_threshold_modified <- gsub("\\.", "", ndvi_threshold)
ndvi_filename <- paste0(base_path,"/mask/",file_name_rectified,"_ndvi_mask_",ndvi_threshold_modified)
writeRaster(ndvi_mask, filename = file.path(ndvi_filename),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
################################################################################
# Create SAVI Mask SAVI = ((NIR - Red) / (NIR + Red + L)) * (1 + L)
################################################################################
# Set the L parameter for SAVI
L <- savi_L
# Calculate the SAVI
SAVI <- ((NIR_average - red_average) * (1 + L)) / (NIR_average + red_average + L)
# Plot a histogram of the SAVI values to inspect the distribution
hist(SAVI, breaks = seq(terra::minmax(SAVI)[1], terra::minmax(SAVI)[2] + 0.05, by = 0.01),
main = "Histogram of SAVI", xlab = "SAVI")
# Create a SAVI mask (e.g., thresholding SAVI to identify vegetation)
# This threshold can be adjusted based on your analysis needs
#savi_threshold <- 0.2
savi_mask <- ifel(SAVI > savi_threshold, 1, 0)  # Here, 0.2 is an example threshold
# Plot the SAVI mask
plot(savi_mask, main = "SAVI Mask")
# Set value 0 to NA to exclude the unwanted pixels
savi_mask <- ifel(savi_mask==0, NA, 1)
# If desired, save the SAVI mask to a file
savi_threshold_modified <- gsub("\\.", "", savi_threshold)
savi_filename <- paste0(base_path,"/mask/",file_name_rectified,"_savi_mask_",savi_threshold_modified)
writeRaster(savi_mask, filename = file.path(savi_filename),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
################################################################################
# Create stacked Mask
################################################################################
mask <- mosaic(savi_mask, ndwi_mask, ndvi_mask, fun="min")
plot(mask)
mask <- ifel(mask==0, NA, 1)
# Now write the raster file
stack_filename <- paste0(base_path,"/mask/",file_name_rectified,"_stacked_mask")
writeRaster(mask, filename = file.path(stack_filename),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# Clear workspace and graphics
rm(list = ls())
graphics.off()
# Define parameter script
source('00_Project_Parameter.R')
raw_image_file_path <- paste0(base_path,'/data/hs_raw_image/',file_name)
rgb_image_file_path <- paste0(base_path,'/data/rgb/',file_name,'_rgb.tif')
# Define the bands you want to select
bandselection <- "-b 59 -b 34 -b 20"
# GDAL translate command to extract the specified bands and create a new image
gdal_translate_command <- sprintf("gdal_translate %s -of GTiff %s %s", bandselection, raw_image_file_path, rgb_image_file_path)
# Execute the GDAL translate command
system(gdal_translate_command)
# Check if the output file was created successfully
if (file.exists(rgb_image_file_path)) {
cat("Output file created successfully:", rgb_image_file_path, "\n")
# GDAL edit command to set color interpretation for each band
gdal_edit_command <- sprintf("gdal_edit.py -colorinterp_1 Red -colorinterp_2 Green -colorinterp_3 Blue %s", rgb_image_file_path)
# Execute the GDAL edit command
system(gdal_edit_command)
# Confirm that color interpretation was set successfully
cat("Color interpretation set to RGB for each band in", rgb_image_file_path, "\n")
} else {
cat("Failed to create output file.\n")
}
print(paste0('RGB created for ', file_name))
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
# load biodivMapR and useful libraries
library(biodivMapR)
library(labdsv)
library(tools)
library(ggplot2)
library(gridExtra)
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
# input image folder path rectified
Datadir <- paste0(base_path,'/data/rectified')
# name of the image file
NameRaster <- file_name_rectified
Input_Image_File <- file.path(Datadir,NameRaster)
Input_HDR_File <- get_HDR_name(Input_Image_File,showWarnings = FALSE)
dir.create(path = Datadir,recursive = T,showWarnings = F)
################################################################################
##                      Set parameters for biodivMapR                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_2.html            ##
################################################################################
# Define path for image file to be processed
# Define path for corresponding mask file
# Set to FALSE if no mask available
#Input_Mask_File <- FALSE
Input_Mask_File <- paste0(base_path,'/mask/',mask_name)
# Define path for master output directory where files produced during the process are saved
# Master output directory (remove unnecessary line break)
Output_Dir <- paste0(base_path,'/result')
dir.create(path = Output_Dir, recursive = TRUE, showWarnings = FALSE)
dir.create(path = Output_Dir,recursive = T,showWarnings = F)
# Define levels for radiometric filtering
NDVI_Thresh <- 0.3
Blue_Thresh <- 500
NIR_Thresh <- 1500
# Apply normalization with continuum removal?
Continuum_Removal <- FALSE
# Type of dimensionality reduction
TypePCA <- 'SPCA'
# PCA FILTERING:        Set to TRUE if you want second filtering based on PCA outliers to be processed.
# Slower process
# Automatically set to FALSE if TypePCA     = 'MNF'
FilterPCA <- FALSE
# window size forcomputation of spectral diversity
window_size <- 10
# computational parameters
nbCPU <- 4
MaxRAM <- 8
# number of clusters (spectral species)
nbclusters <- 20
# set excluding wavelengths --> either "FALS" or some wavelengths
#Excluded_WL = FALSE
# bblist[0:14] = 0
# bblist[189:225] = 0
# bblist[281:336] = 0
# bblist[405:] = 0
#
Excluded_WL <- c(0, 442)
Excluded_WL <- rbind(Excluded_WL, c(1368, 1499))
Excluded_WL <- rbind(Excluded_WL, c(1779, 2055))
Excluded_WL <- rbind(Excluded_WL, c(2400, 2501))
# if (file.exists(Input_Image_File)) {
#   print("Input_Image_File File found.")
# } else {
#   print("Input_Image_File File not found. Check the path and working directory.")
# }
#
# if (file.exists(Input_Mask_File)) {
#   print("Input_Mask_File File found.")
# } else {
#   print("Input_Mask_File File not found. Check the path and working directory.")
# }
################################################################################
##                      Perform radiometric filtering                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_3.html            ##
################################################################################
# print("PERFORM RADIOMETRIC FILTERING")
# Input_Mask_File <- perform_radiometric_filtering(Image_Path = Input_Image_File,
#                                                  Mask_Path = Input_Mask_File,
#                                                  Output_Dir = Output_Dir,
#                                                  TypePCA = TypePCA,
#                                                  NDVI_Thresh = ndvi_threshold,
#                                                  Blue_Thresh = Blue_Thresh,
#                                                  NIR_Thresh = NIR_Thresh)
################################################################################
##                  Perform PCA & Dimensionality reduction                    ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_4.html            ##
################################################################################
print("PERFORM DIMENSIONALITY REDUCTION")
#debug(perform_PCA)
PCA_Output <- perform_PCA(Input_Image_File = Input_Image_File,
Input_Mask_File = Input_Mask_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
FilterPCA = FilterPCA,
Excluded_WL = Excluded_WL,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
Continuum_Removal = Continuum_Removal)
# Save the list as an RDS file
pca_output_rds_file_path = paste0(Output_Dir,"/",NameRaster,"/",TypePCA,"/PCA/","PCA_Output.rds")
saveRDS(PCA_Output, file = pca_output_rds_file_path)
# Later, load the list back into R
PCA_Output <- readRDS(pca_output_rds_file_path)
# path for the updated mask
Input_Mask_File <- PCA_Output$MaskPath
var_exp <- (PCA_Output$PCA_model$sdev^2/sum(PCA_Output$PCA_model$sdev^2))*100
barplot(var_exp, names.arg = colnames(PCA_Output$PCA_model$x))
pca_output_image_file_path = paste0(Output_Dir,"/",NameRaster,"/",TypePCA,"/PCA/","OutputPCA_30_PCs")
print(pca_output_image_file_path)
pca_output_image <- rast(pca_output_image_file_path)
plot(pca_output_image, main = "Principal Components", nc = 5, maxnl = 30)  # maxnl allows all 30 layers to be shown
# Define the path for PCA plots
# Define the path for individual PCA component plots
pca_plots_file_path <- paste0(Output_Dir, "/", NameRaster, "/", TypePCA, "/PCA/PCA_Plots")
# Create the directory if it doesn't exist
if (!dir.exists(pca_plots_file_path)) {
dir.create(pca_plots_file_path, recursive = TRUE, showWarnings = FALSE)
}
# Initialize a list to store output plot file paths
output_plots <- list()
# Loop through each layer in the PCA output image
for (i in 1:nlyr(pca_output_image)) {
# Extract each PC layer as a separate raster
pc_layer <- pca_output_image[[i]]
# Define the output file path for the plot
output_file <- paste0(pca_plots_file_path, "/PCA_PC_", i, ".png")
# Save the plot as a PNG
png(filename = output_file, width = 800, height = 600)
plot(pc_layer,
main = paste0("Principal Component ", i),
col = terrain.colors(100))  # Customize colors if needed
dev.off()  # Close the PNG device
# Store the output file path
output_plots[[i]] <- output_file
}
# Optional: print confirmation
print("PCA plots saved to:")
print(pca_plots_file_path)
# Select components from the PCA/SPCA/MNF raster
# Sel_PC = path of the file where selected components are stored
Sel_PC <- select_PCA_components(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
PCA_Files = PCA_Output$PCA_Files,
TypePCA = PCA_Output$TypePCA,
File_Open = TRUE)
################################################################################
##                  Perform Spectral species mapping                          ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_5.html            ##
################################################################################
print("MAP SPECTRAL SPECIES")
Kmeans_info <- map_spectral_species(Input_Image_File = Input_Image_File,
Input_Mask_File = PCA_Output$MaskPath,
Output_Dir = Output_Dir,
SpectralSpace_Output = PCA_Output,
nbclusters = nbclusters,
nbCPU = nbCPU, MaxRAM = MaxRAM)
################################################################################
##                Perform alpha and beta diversity mapping                    ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_6.html            ##
################################################################################
print("MAP ALPHA DIVERSITY")
Index_Alpha   = c('Shannon','Simpson')
#Index_Alpha <- c('Shannon')
map_alpha_div(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
window_size = window_size,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
Index_Alpha = Index_Alpha,
nbclusters = nbclusters)
print("MAP BETA DIVERSITY")
map_beta_div(Input_Image_File = Input_Image_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
window_size = window_size,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
nbclusters = nbclusters)
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
file_name <- file_name_rectified
cell <- paste0(base_path,'/data/rectified/',file_name)
tile <- rast(file.path(cell))
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
file_name <- file_name_rectified
cell <- paste0(base_path,'/data/rectified/',file_name)
tile <- rast(file.path(cell))
# Clear workspace and graphics
rm(list = ls())
graphics.off()
# Define parameter script
source('00_Project_Parameter.R')
raw_image_file_path <- paste0(base_path,'/data/hs_raw_image/',file_name)
rgb_image_file_path <- paste0(base_path,'/data/rgb/',file_name,'_rgb.tif')
# Define the bands you want to select
bandselection <- "-b 59 -b 34 -b 20"
# GDAL translate command to extract the specified bands and create a new image
gdal_translate_command <- sprintf("gdal_translate %s -of GTiff %s %s", bandselection, raw_image_file_path, rgb_image_file_path)
# Execute the GDAL translate command
system(gdal_translate_command)
# Check if the output file was created successfully
if (file.exists(rgb_image_file_path)) {
cat("Output file created successfully:", rgb_image_file_path, "\n")
# GDAL edit command to set color interpretation for each band
gdal_edit_command <- sprintf("gdal_edit.py -colorinterp_1 Red -colorinterp_2 Green -colorinterp_3 Blue %s", rgb_image_file_path)
# Execute the GDAL edit command
system(gdal_edit_command)
# Confirm that color interpretation was set successfully
cat("Color interpretation set to RGB for each band in", rgb_image_file_path, "\n")
} else {
cat("Failed to create output file.\n")
}
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
file_name <- file_name_rectified
cell <- paste0(base_path,'/data/rectified/',file_name)
tile <- rast(file.path(cell))
library(terra)
swissalti3d <- terra::rast("ang20180812t223939_rfl_v2r2_img_rectified")
wd <- getwd()
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Define parameter script
source('00_Project_Parameter.R')
file_name <- file_name_rectified
cell <- paste0(base_path,'/data/rectified/',file_name)
tile <- rast(file.path(cell))
# Clear workspace and graphics
rm(list = ls())
graphics.off()
# Define parameter script
source('00_Project_Parameter.R')
raw_image_file_path <- paste0(base_path,'/data/hs_raw_image/',file_name)
rgb_image_file_path <- paste0(base_path,'/data/rgb/',file_name,'_rgb.tif')
# Define the bands you want to select
bandselection <- "-b 59 -b 34 -b 20"
# GDAL translate command to extract the specified bands and create a new image
gdal_translate_command <- sprintf("gdal_translate %s -of GTiff %s %s", bandselection, raw_image_file_path, rgb_image_file_path)
# Execute the GDAL translate command
system(gdal_translate_command)
# Check if the output file was created successfully
if (file.exists(rgb_image_file_path)) {
cat("Output file created successfully:", rgb_image_file_path, "\n")
# GDAL edit command to set color interpretation for each band
gdal_edit_command <- sprintf("gdal_edit.py -colorinterp_1 Red -colorinterp_2 Green -colorinterp_3 Blue %s", rgb_image_file_path)
# Execute the GDAL edit command
system(gdal_edit_command)
# Confirm that color interpretation was set successfully
cat("Color interpretation set to RGB for each band in", rgb_image_file_path, "\n")
} else {
cat("Failed to create output file.\n")
}
# Clear workspace and graphics
rm(list = ls())
graphics.off()
# Define parameter script
source('00_Project_Parameter.R')
raw_image_file_path <- paste0(base_path,'/data/hs_raw_image/',file_name)
rgb_image_file_path <- paste0(base_path,'/data/rgb/',file_name,'_rgb.tif')
# Define the bands you want to select
bandselection <- "-b 59 -b 34 -b 20"
# GDAL translate command to extract the specified bands and create a new image
gdal_translate_command <- sprintf("gdal_translate %s -of GTiff %s %s", bandselection, raw_image_file_path, rgb_image_file_path)
# Execute the GDAL translate command
system(gdal_translate_command)
# Check if the output file was created successfully
if (file.exists(rgb_image_file_path)) {
cat("Output file created successfully:", rgb_image_file_path, "\n")
# GDAL edit command to set color interpretation for each band
gdal_edit_command <- sprintf("gdal_edit.py -colorinterp_1 Red -colorinterp_2 Green -colorinterp_3 Blue %s", rgb_image_file_path)
# Execute the GDAL edit command
system(gdal_edit_command)
# Confirm that color interpretation was set successfully
cat("Color interpretation set to RGB for each band in", rgb_image_file_path, "\n")
} else {
cat("Failed to create output file.\n")
}
---
title: "Biodiversity in the Arctic Tundra using hyperspectral images"
