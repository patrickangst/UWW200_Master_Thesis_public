NDVI_Thresh <- 0.3
Blue_Thresh <- 500
NIR_Thresh <- 1500
# Apply normalization with continuum removal?
Continuum_Removal <- FALSE
# Type of dimensionality reduction
TypePCA <- 'SPCA'
# PCA FILTERING:        Set to TRUE if you want second filtering based on PCA outliers to be processed.
# Slower process
# Automatically set to FALSE if TypePCA     = 'MNF'
FilterPCA <- FALSE
# window size forcomputation of spectral diversity
window_size <- 10
# computational parameters
nbCPU <- 6
MaxRAM <- 16
# number of clusters (spectral species)
nbclusters <- 50
# if (file.exists(Input_Image_File)) {
#   print("Input_Image_File File found.")
# } else {
#   print("Input_Image_File File not found. Check the path and working directory.")
# }
#
# if (file.exists(Input_Mask_File)) {
#   print("Input_Mask_File File found.")
# } else {
#   print("Input_Mask_File File not found. Check the path and working directory.")
# }
################################################################################
##                      Perform radiometric filtering                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_3.html            ##
################################################################################
# print("PERFORM RADIOMETRIC FILTERING")
# Input_Mask_File <- perform_radiometric_filtering(Image_Path = Input_Image_File,
#                                                  Mask_Path = Input_Mask_File,
#                                                  Output_Dir = Output_Dir,
#                                                  TypePCA = TypePCA,
#                                                  NDVI_Thresh = NDVI_Thresh,
#                                                  Blue_Thresh = Blue_Thresh,
#                                                  NIR_Thresh = NIR_Thresh)
################################################################################
##                  Perform PCA & Dimensionality reduction                    ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_4.html            ##
################################################################################
print("PERFORM DIMENSIONALITY REDUCTION")
#debug(perform_PCA)
PCA_Output <- perform_PCA(Input_Image_File = Input_Image_File,
Input_Mask_File = Input_Mask_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
FilterPCA = FilterPCA,
Excluded_WL = FALSE,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
Continuum_Removal = Continuum_Removal)
# path for the updated mask
Input_Mask_File <- PCA_Output$MaskPath
mem.maxVSize()
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path("/scratch/mpijne/reflectance_data", cell))
library(terra)
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path("/scratch/mpijne/reflectance_data", cell))
tile <- rast(file.path(cell))
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
shade_mask <- ifel(NIR_average<0.05, 0, 1)
plot(shade_mask)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
hist(NDWI)
water_mask <- ifel(NDWI>0.1, 0, 1)
plot(water_mask)
temp_rast <- rast(ext(tile), resolution = res(tile))
View(temp_rast)
View(temp_rast)
mask <- mosaic(shade_mask, water_mask, cloud_mask, building_mask, fun="min")
mask <- mosaic(shade_mask, water_mask, fun="min")
plot(mask)
mask <- ifel(mask==0, NA, 1) #is it necessary?
View(mask)
writeRaster(mask, filename = paste("/mask/my_mask", sep=""),filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
writeRaster(mask, filename = paste("/mask/my_mask", sep=""),filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
writeRaster(mask, filename = paste(file.path(c"/mask/my_mask"), sep=""),filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
writeRaster(mask, filename = file.path("/mask/my_mask",filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
writeRaster(mask, filename = file.path("/mask/my_mask"),filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
shade_mask <- ifel(NIR_average<0.05, 0, 1)
plot(shade_mask)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
hist(NDWI)
water_mask <- ifel(NDWI>0.1, 0, 1)
plot(water_mask)
mask <- mosaic(shade_mask, water_mask, fun="min")
plot(mask)
mask <- ifel(mask==0, NA, 1) #is it necessary?
writeRaster(mask, filename = file.path("/mask/my_mask"),filetype="ENVI", gdal="INTERLEAVE=BSQ", overwrite=T, datatype="INT1U")
# Now write the raster file
writeRaster(mask, filename = file.path("mask/my_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# Set the L parameter for SAVI
L <- 0.5
# Calculate the NIR and Red band averages
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
Red_average <- mean(tile[[c(56, 57, 58, 59, 60, 61, 62, 63, 64, 65)]])
# Calculate the SAVI
SAVI <- ((NIR_average - Red_average) * (1 + L)) / (NIR_average + Red_average + L)
# Plot a histogram of the SAVI values to inspect the distribution
hist(SAVI, breaks = seq(terra::minmax(SAVI)[1], terra::minmax(SAVI)[2] + 0.05, by = 0.01),
main = "Histogram of SAVI", xlab = "SAVI")
# Create a SAVI mask (e.g., thresholding SAVI to identify vegetation)
# This threshold can be adjusted based on your analysis needs
savi_mask <- ifel(SAVI > 0.2, 1, 0)  # Here, 0.2 is an example threshold
plot(savi_mask, main = "SAVI Mask")
# If desired, save the SAVI mask to a file
writeRaster(mask, filename = file.path("mask/savi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
plot(ext(tile))
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
#plot(ext(tile))
# Plot the RGB image for a quick check
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# clean environment
rm(list=ls(all=TRUE));gc()
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
#plot(ext(tile))
# Plot the RGB image for a quick check
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
#plot(ext(tile))
# Plot the RGB image for a quick check
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Plot the RGB image for a quick check
plot(ext(tile))
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
# Calculate the NDWI
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
# Plot histogram of the value distribution
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
# Plot the RGB image for a quick check
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Calculate the mean of a few values of the near infrared bands (used for NDWI and SAVI)
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Plot histogram of the distribution of the values
hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
#shade_mask <- ifel(NIR_average<0.05, 0, 1)
#plot(shade_mask)
# Calculate green band averages (used for NDWI)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
# Calculate the NDWI
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
# Plot histogram of the value distribution
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
hist(NDWI)
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
# Plot the RGB image for a quick check
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Calculate the mean of a few values of the near infrared bands (used for NDWI and SAVI)
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Plot histogram of the distribution of the values
hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
#shade_mask <- ifel(NIR_average<0.05, 0, 1)
#plot(shade_mask)
# Calculate green band averages (used for NDWI)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
# Calculate the NDWI
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
# Plot histogram of the value distribution
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
# Create the NDWI mask (binary values) with a threshold of 0.1
ndwi_mask <- ifel(NDWI>0.1, 0, 1)
# Plot the NDWI mask to check
plot(ndwi_mask, main = "NDWI Mask")
# If desired, save the NDWI mask to a file
writeRaster(ndwi_mask, filename = file.path("mask/ndwi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# Set the L parameter for SAVI
L <- 0.5
# Calculate the NIR and Red band averages
#NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Calculate red band averages (used for SAVI)
Red_average <- mean(tile[[c(56, 57, 58, 59, 60, 61, 62, 63, 64, 65)]])
# Calculate the SAVI
SAVI <- ((NIR_average - Red_average) * (1 + L)) / (NIR_average + Red_average + L)
# Plot a histogram of the SAVI values to inspect the distribution
hist(SAVI, breaks = seq(terra::minmax(SAVI)[1], terra::minmax(SAVI)[2] + 0.05, by = 0.01),
main = "Histogram of SAVI", xlab = "SAVI")
# Create a SAVI mask (e.g., thresholding SAVI to identify vegetation)
# This threshold can be adjusted based on your analysis needs
savi_mask <- ifel(SAVI > 0.2, 1, 0)  # Here, 0.2 is an example threshold
plot(savi_mask, main = "SAVI Mask")
# If desired, save the SAVI mask to a file
writeRaster(savi_mask, filename = file.path("mask/savi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# Create a SAVI mask (e.g., thresholding SAVI to identify vegetation)
# This threshold can be adjusted based on your analysis needs
savi_mask <- ifel(SAVI > 0.2, 1, 0)  # Here, 0.2 is an example threshold
savi_mask <- ifel(savi_mask==0, NA, 1)
plot(savi_mask, main = "SAVI Mask")
# If desired, save the SAVI mask to a file
writeRaster(savi_mask, filename = file.path("mask/savi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
# Plot the RGB image for a quick check
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Calculate the mean of a few values of the near infrared bands (used for NDWI and SAVI)
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Plot histogram of the distribution of the values
hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
#shade_mask <- ifel(NIR_average<0.05, 0, 1)
#plot(shade_mask)
# Calculate green band averages (used for NDWI)
green_average <- mean(tile[[c(26, 27, 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45)]])
# Calculate the NDWI
NDWI <- (green_average-NIR_average)/(green_average+NIR_average)
# Plot histogram of the value distribution
hist(NDWI, breaks = seq(terra::minmax(NDWI)[1], terra::minmax(NDWI)[2] + 0.05, by = 0.01),
main = "Histogram of NDWI", xlab = "NDWI")
# Create the NDWI mask (binary values) with a threshold of 0.1
ndwi_mask <- ifel(NDWI>0.1, 0, 1)
# Plot the NDWI mask
plot(ndwi_mask, main = "NDWI Mask")
# Set value 0 to NA to exclude the unwanted pixels
ndwi_mask <- ifel(ndwi_mask==0, NA, 1)
# If desired, save the NDWI mask to a file
writeRaster(ndwi_mask, filename = file.path("mask/ndwi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
# Set the L parameter for SAVI
L <- 0.5
# Calculate the NIR and Red band averages
#NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Calculate red band averages (used for SAVI)
Red_average <- mean(tile[[c(56, 57, 58, 59, 60, 61, 62, 63, 64, 65)]])
# Calculate the SAVI
SAVI <- ((NIR_average - Red_average) * (1 + L)) / (NIR_average + Red_average + L)
# Plot a histogram of the SAVI values to inspect the distribution
hist(SAVI, breaks = seq(terra::minmax(SAVI)[1], terra::minmax(SAVI)[2] + 0.05, by = 0.01),
main = "Histogram of SAVI", xlab = "SAVI")
# Create a SAVI mask (e.g., thresholding SAVI to identify vegetation)
# This threshold can be adjusted based on your analysis needs
savi_mask <- ifel(SAVI > 0.2, 1, 0)  # Here, 0.2 is an example threshold
# Plot the SAVI mask
plot(savi_mask, main = "SAVI Mask")
# Set value 0 to NA to exclude the unwanted pixels
savi_mask <- ifel(savi_mask==0, NA, 1)
# If desired, save the SAVI mask to a file
writeRaster(savi_mask, filename = file.path("mask/savi_mask"),
filetype = "ENVI",
gdal = "INTERLEAVE=BSQ",
overwrite = TRUE,
datatype = "INT1U")
mask <- mosaic(shade_mask, water_mask, fun="min")
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
library(terra)
# Read in hyperspectral image
cell <- "data/rectified/ang20190712t231624_rfl_v2v2_img_rectified_v2"
tile <- rast(file.path(cell))
# Plot the RGB image for a quick check
plot(ext(tile))
plotRGB(tile, add=T, r=54, g=36, b=20, stretch="lin")
# Calculate the mean of a few values of the near infrared bands (used for NDWI and SAVI)
NIR_average <- mean(tile[[c(86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105)]])
# Plot histogram of the distribution of the values
hist(NIR_average, breaks = seq(terra::minmax(NIR_average)[1], terra::minmax(NIR_average)[2] + 0.05, by = 0.01),
main = "Histogram of NIR average", xlab = "NIR_average")
#hist(NIR_average, breaks=seq(terra::minmax(NIR_average)[1],terra::minmax(NIR_average)[2]+0.05, by=0.01))
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
# load biodivMapR and useful libraries
library(biodivMapR)
library(labdsv)
library(tools)
library(ggplot2)
library(gridExtra)
library(terra)
# ===============================================================================
# url for the S2 subset
Datadir <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/data/rectified'
dir.create(path = Datadir,recursive = T,showWarnings = F)
# name your binary raster with the same name as the online file
#NameRaster <- 'ang20190712t231624_rfl_v2v2_img_cutline'
NameRaster <- 'ang20190712t231624_rfl_v2v2_img_rectified_v2'
destfile <- file.path(Datadir,NameRaster)
# ===============================================================================
# name your raster HDR with the same name as the binary raster, with .hdr extension
destfile_HDR <- get_HDR_name(destfile,showWarnings = FALSE)
# ===============================================================================
# url for the vector files corresponding to different vegetation types
################################################################################
##                      Set parameters for biodivMapR                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_2.html            ##
################################################################################
# Define path for image file to be processed
Input_Image_File <- file.path(Datadir,NameRaster)
# Define path for corresponding mask file
# Set to FALSE if no mask available
#Input_Mask_File <- FALSE
Input_Mask_File <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/mask/savi_mask'
# Define path for master output directory where files produced during the process are saved
Output_Dir <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/result'
dir.create(path = Output_Dir,recursive = T,showWarnings = F)
# Define levels for radiometric filtering
NDVI_Thresh <- 0.3
Blue_Thresh <- 500
NIR_Thresh <- 1500
# Apply normalization with continuum removal?
Continuum_Removal <- FALSE
# Type of dimensionality reduction
TypePCA <- 'SPCA'
# PCA FILTERING:        Set to TRUE if you want second filtering based on PCA outliers to be processed.
# Slower process
# Automatically set to FALSE if TypePCA     = 'MNF'
FilterPCA <- FALSE
# window size forcomputation of spectral diversity
window_size <- 10
# computational parameters
nbCPU <- 6
MaxRAM <- 16
# number of clusters (spectral species)
nbclusters <- 50
# set excluding wavelengths --> either "FALS" or some wavelengths
#Excluded_WL = FALSE
# bblist[0:14] = 0
# bblist[189:225] = 0
# bblist[281:336] = 0
# bblist[405:] = 0
#
Excluded_WL <- c(0, 442)
Excluded_WL <- rbind(Excluded_WL, c(1368, 1499))
Excluded_WL <- rbind(Excluded_WL, c(1779, 2055))
Excluded_WL <- rbind(Excluded_WL, c(2400, 2501))
View(Excluded_WL)
View(Excluded_WL)
# clean environment
rm(list=ls(all=TRUE));gc()
graphics.off()
# load biodivMapR and useful libraries
library(biodivMapR)
library(labdsv)
library(tools)
library(ggplot2)
library(gridExtra)
library(terra)
# ===============================================================================
# url for the S2 subset
Datadir <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/data/rectified'
dir.create(path = Datadir,recursive = T,showWarnings = F)
# name your binary raster with the same name as the online file
#NameRaster <- 'ang20190712t231624_rfl_v2v2_img_cutline'
NameRaster <- 'ang20190712t231624_rfl_v2v2_img_rectified_v2'
destfile <- file.path(Datadir,NameRaster)
# ===============================================================================
# name your raster HDR with the same name as the binary raster, with .hdr extension
destfile_HDR <- get_HDR_name(destfile,showWarnings = FALSE)
# ===============================================================================
# url for the vector files corresponding to different vegetation types
################################################################################
##                      Set parameters for biodivMapR                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_2.html            ##
################################################################################
# Define path for image file to be processed
Input_Image_File <- file.path(Datadir,NameRaster)
# Define path for corresponding mask file
# Set to FALSE if no mask available
#Input_Mask_File <- FALSE
Input_Mask_File <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/mask/savi_mask'
# Define path for master output directory where files produced during the process are saved
Output_Dir <- '~/Documents/GitHub/UWW200_Master_Thesis_public/MasterThesisRCode/result'
dir.create(path = Output_Dir,recursive = T,showWarnings = F)
# Define levels for radiometric filtering
NDVI_Thresh <- 0.3
Blue_Thresh <- 500
NIR_Thresh <- 1500
# Apply normalization with continuum removal?
Continuum_Removal <- FALSE
# Type of dimensionality reduction
TypePCA <- 'SPCA'
# PCA FILTERING:        Set to TRUE if you want second filtering based on PCA outliers to be processed.
# Slower process
# Automatically set to FALSE if TypePCA     = 'MNF'
FilterPCA <- FALSE
# window size forcomputation of spectral diversity
window_size <- 10
# computational parameters
nbCPU <- 6
MaxRAM <- 32
# number of clusters (spectral species)
nbclusters <- 20
# set excluding wavelengths --> either "FALS" or some wavelengths
#Excluded_WL = FALSE
# bblist[0:14] = 0
# bblist[189:225] = 0
# bblist[281:336] = 0
# bblist[405:] = 0
#
Excluded_WL <- c(0, 442)
Excluded_WL <- rbind(Excluded_WL, c(1368, 1499))
Excluded_WL <- rbind(Excluded_WL, c(1779, 2055))
Excluded_WL <- rbind(Excluded_WL, c(2400, 2501))
# if (file.exists(Input_Image_File)) {
#   print("Input_Image_File File found.")
# } else {
#   print("Input_Image_File File not found. Check the path and working directory.")
# }
#
# if (file.exists(Input_Mask_File)) {
#   print("Input_Mask_File File found.")
# } else {
#   print("Input_Mask_File File not found. Check the path and working directory.")
# }
################################################################################
##                      Perform radiometric filtering                         ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_3.html            ##
################################################################################
# print("PERFORM RADIOMETRIC FILTERING")
# Input_Mask_File <- perform_radiometric_filtering(Image_Path = Input_Image_File,
#                                                  Mask_Path = Input_Mask_File,
#                                                  Output_Dir = Output_Dir,
#                                                  TypePCA = TypePCA,
#                                                  NDVI_Thresh = NDVI_Thresh,
#                                                  Blue_Thresh = Blue_Thresh,
#                                                  NIR_Thresh = NIR_Thresh)
################################################################################
##                  Perform PCA & Dimensionality reduction                    ##
## https://jbferet.github.io/biodivMapR/articles/biodivMapR_4.html            ##
################################################################################
print("PERFORM DIMENSIONALITY REDUCTION")
#debug(perform_PCA)
PCA_Output <- perform_PCA(Input_Image_File = Input_Image_File,
Input_Mask_File = Input_Mask_File,
Output_Dir = Output_Dir,
TypePCA = TypePCA,
FilterPCA = FilterPCA,
Excluded_WL = Excluded_WL,
nbCPU = nbCPU,
MaxRAM = MaxRAM,
Continuum_Removal = Continuum_Removal)
